# ===================================================================
# SERVER CONFIGURATION
# ===================================================================
# Sets the port for the embedded Tomcat web server. 8080 is the default.
server.port=8080
# For development: includes a full stack trace in the error response if you add "?trace=true" to your API call URL.
# This is very helpful for debugging API errors directly in Postman.
server.error.include-stacktrace=ON_PARAM


# ===================================================================
# H2 DATABASE CONFIGURATION (for Development)
# ===================================================================
# The connection URL for the H2 in-memory database. 'mem:fddb' means it creates a database named 'fddb'
# that exists only in memory and is cleared when the application stops.
spring.datasource.url=jdbc:mysql://localhost:3306/FD_ModuleDB?useSSL=false&allowPublicKeyRetrieval=true

# The username for the H2 database.



spring.datasource.username=root
# The password for the H2 database.
spring.datasource.password=root@fintech
spring.jpa.defer-datasource-initialization=false
# Sets the URL path for the H2 console. You will access it at: http://localhost:8080/h2-console

# This tells Hibernate to use the specific SQL "dialect" for MySQL, which helps it generate compatible SQL.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

# ===================================================================
# JPA / HIBERNATE CONFIGURATION
# ===================================================================
# This is a powerful development feature. 'update' tells Hibernate (our JPA provider) to automatically
# compare your @Entity classes with the database tables and add/modify columns as needed on startup.
# WARNING: In production, this is usually set to 'validate' or handled by migration tools like Flyway.
spring.jpa.hibernate.ddl-auto=update

# This tells Hibernate to print the actual SQL queries it generates to the console.
# It's extremely useful for debugging and seeing what's happening under the hood.
spring.jpa.show-sql=true

# This works with 'show-sql=true' to format the printed SQL, making it much more readable.
spring.jpa.properties.hibernate.format_sql=true


# ===================================================================
# KAFKA PRODUCER CONFIGURATION
# ===================================================================
# The address of your Kafka broker(s). Your application will connect to this address.
# Make sure Kafka is running and accessible here before you start the application.
spring.kafka.bootstrap-servers=localhost:9092

# Defines the serializer for the Kafka message's key. We're using a simple String (the account number).
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer

# Defines the serializer for the Kafka message's value. Using JsonSerializer is a best practice.
# It allows us to send our 'AccountCreatedEvent' Java object directly, and Spring will automatically
# convert it into a JSON string. This is great for interoperability.
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer


# ===================================================================
# SPRINGDOC OPENAPI / SWAGGER CONFIGURATION
# ===================================================================
# Path for the OpenAPI JSON document
springdoc.api-docs.path=/api-docs

# Path for the Swagger UI
springdoc.swagger-ui.path=/swagger-ui.html

# Enable Swagger UI
springdoc.swagger-ui.enabled=true

# Show common request/response headers
springdoc.swagger-ui.display-request-duration=true

# Sort endpoints by path
springdoc.swagger-ui.tags-sorter=alpha
springdoc.swagger-ui.operations-sorter=alpha

# Packages to scan for OpenAPI documentation
springdoc.packages-to-scan=com.example.demo.controller


# ===================================================================
# AUTHENTICATION CONFIGURATION
# ===================================================================
# Base URL for the authentication service
auth.service.base-url=http://localhost:3020

# Public key endpoint path (appended to base URL)
auth.service.public-key-path=/api/auth/public-key


# ===================================================================
# FD CALCULATION SERVICE CONFIGURATION
# ===================================================================
# Base URL for the FD calculation service
fd.calculation.service.base-url=http://localhost:4030

# Calculation endpoint path (appended to base URL)
fd.calculation.service.path=/api/fd/calculations


# ===================================================================
# PRODUCT AND PRICING SERVICE CONFIGURATION
# ===================================================================
# Base URL for the product and pricing service
product.service.base-url=http://localhost:8080

# Product details endpoint path (use {productCode} as placeholder)
product.service.path=/api/products
